/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  IceCandyAssetStoreRegistory,
  IceCandyAssetStoreRegistoryInterface,
} from "../../../../contracts/assetstore/IceCandyAssetStore.sol/IceCandyAssetStoreRegistory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "getAssetCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_assetURI",
        type: "string",
      },
    ],
    name: "registerAsset",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    name: "setAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_assetId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_status",
        type: "bool",
      },
    ],
    name: "setAssetBlacklistStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_status",
        type: "bool",
      },
    ],
    name: "setCreatorWhitelistStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261010360201b60201c565b61010b60201b60201c565b61004160016101cf60201b6105e51760201c565b6001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600360006100ad6101e560201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061020e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610fcd8061021d6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100eb5780639fe4000a14610109578063a0aead4d14610139578063f2fde38b1461015757610088565b806315ec824c1461008d578063704b6c02146100a9578063715018a6146100c557806383ccebf5146100cf575b600080fd5b6100a760048036038101906100a2919061098b565b610173565b005b6100c360048036038101906100be91906109cb565b6102a5565b005b6100cd610308565b005b6100e960048036038101906100e49190610a2e565b61031c565b005b6100f361047b565b6040516101009190610a7d565b60405180910390f35b610123600480360381019061011e9190610bde565b6104a4565b6040516101309190610c65565b60405180910390f35b610141610544565b60405161014e9190610c65565b60405180910390f35b610171600480360381019061016c91906109cb565b610561565b005b61017b6105fb565b73ffffffffffffffffffffffffffffffffffffffff1661019961047b565b73ffffffffffffffffffffffffffffffffffffffff16148061020b5750600360006101c26105fb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61024a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024190610cdd565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6102ad610603565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610310610603565b61031a6000610681565b565b8160008111801561033557506103326001610745565b81105b610374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036b90610d49565b60405180910390fd5b61037c6105fb565b73ffffffffffffffffffffffffffffffffffffffff1661039a61047b565b73ffffffffffffffffffffffffffffffffffffffff16148061040c5750600360006103c36105fb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b61044b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044290610cdd565b60405180910390fd5b816005600085815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052990610db5565b60405180910390fd5b61053c8383610753565b905092915050565b600060016105526001610745565b61055c9190610e04565b905090565b610569610603565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090610eaa565b60405180910390fd5b6105e281610681565b50565b6001816000016000828254019250508190555050565b600033905090565b61060b6105fb565b73ffffffffffffffffffffffffffffffffffffffff1661062961047b565b73ffffffffffffffffffffffffffffffffffffffff161461067f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067690610f16565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b6000806107606001610745565b905061076c60016105e5565b60405180606001604052808581526020013373ffffffffffffffffffffffffffffffffffffffff168152602001848152506002600083815260200190815260200160002060008201518160000190805190602001906107cc92919061083e565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019061083092919061083e565b509050508091505092915050565b82805461084a90610f65565b90600052602060002090601f01602090048101928261086c57600085556108b3565b82601f1061088557805160ff19168380011785556108b3565b828001600101855582156108b3579182015b828111156108b2578251825591602001919060010190610897565b5b5090506108c091906108c4565b5090565b5b808211156108dd5760008160009055506001016108c5565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610920826108f5565b9050919050565b61093081610915565b811461093b57600080fd5b50565b60008135905061094d81610927565b92915050565b60008115159050919050565b61096881610953565b811461097357600080fd5b50565b6000813590506109858161095f565b92915050565b600080604083850312156109a2576109a16108eb565b5b60006109b08582860161093e565b92505060206109c185828601610976565b9150509250929050565b6000602082840312156109e1576109e06108eb565b5b60006109ef8482850161093e565b91505092915050565b6000819050919050565b610a0b816109f8565b8114610a1657600080fd5b50565b600081359050610a2881610a02565b92915050565b60008060408385031215610a4557610a446108eb565b5b6000610a5385828601610a19565b9250506020610a6485828601610976565b9150509250929050565b610a7781610915565b82525050565b6000602082019050610a926000830184610a6e565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610aeb82610aa2565b810181811067ffffffffffffffff82111715610b0a57610b09610ab3565b5b80604052505050565b6000610b1d6108e1565b9050610b298282610ae2565b919050565b600067ffffffffffffffff821115610b4957610b48610ab3565b5b610b5282610aa2565b9050602081019050919050565b82818337600083830152505050565b6000610b81610b7c84610b2e565b610b13565b905082815260208101848484011115610b9d57610b9c610a9d565b5b610ba8848285610b5f565b509392505050565b600082601f830112610bc557610bc4610a98565b5b8135610bd5848260208601610b6e565b91505092915050565b60008060408385031215610bf557610bf46108eb565b5b600083013567ffffffffffffffff811115610c1357610c126108f0565b5b610c1f85828601610bb0565b925050602083013567ffffffffffffffff811115610c4057610c3f6108f0565b5b610c4c85828601610bb0565b9150509250929050565b610c5f816109f8565b82525050565b6000602082019050610c7a6000830184610c56565b92915050565b600082825260208201905092915050565b7f596f7520617265206e6f74207468652061646d696e0000000000000000000000600082015250565b6000610cc7601583610c80565b9150610cd282610c91565b602082019050919050565b60006020820190508181036000830152610cf681610cba565b9050919050565b7f6173736574206973206e6f742065786973740000000000000000000000000000600082015250565b6000610d33601283610c80565b9150610d3e82610cfd565b602082019050919050565b60006020820190508181036000830152610d6281610d26565b9050919050565b7f596f7520617265206e6f74206c69737465640000000000000000000000000000600082015250565b6000610d9f601283610c80565b9150610daa82610d69565b602082019050919050565b60006020820190508181036000830152610dce81610d92565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e0f826109f8565b9150610e1a836109f8565b925082821015610e2d57610e2c610dd5565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e94602683610c80565b9150610e9f82610e38565b604082019050919050565b60006020820190508181036000830152610ec381610e87565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610f00602083610c80565b9150610f0b82610eca565b602082019050919050565b60006020820190508181036000830152610f2f81610ef3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610f7d57607f821691505b60208210811415610f9157610f90610f36565b5b5091905056fea2646970667358221220ed0ccb20adaec2c0e5a51ba34203e90def33109173e56cc61c16f13ecc72999664736f6c634300080a0033";

type IceCandyAssetStoreRegistoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IceCandyAssetStoreRegistoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IceCandyAssetStoreRegistory__factory extends ContractFactory {
  constructor(...args: IceCandyAssetStoreRegistoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<IceCandyAssetStoreRegistory> {
    return super.deploy(
      overrides || {}
    ) as Promise<IceCandyAssetStoreRegistory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): IceCandyAssetStoreRegistory {
    return super.attach(address) as IceCandyAssetStoreRegistory;
  }
  override connect(signer: Signer): IceCandyAssetStoreRegistory__factory {
    return super.connect(signer) as IceCandyAssetStoreRegistory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IceCandyAssetStoreRegistoryInterface {
    return new utils.Interface(_abi) as IceCandyAssetStoreRegistoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IceCandyAssetStoreRegistory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IceCandyAssetStoreRegistory;
  }
}

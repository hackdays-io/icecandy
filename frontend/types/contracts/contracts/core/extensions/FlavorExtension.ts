/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IFlavorExtension {
  export type FlavorStructStruct = {
    flavorType: PromiseOrValue<BigNumberish>;
    active: PromiseOrValue<boolean>;
  };

  export type FlavorStructStructOutput = [number, boolean] & {
    flavorType: number;
    active: boolean;
  };
}

export interface FlavorExtensionInterface extends utils.Interface {
  functions: {
    "activate(uint256,uint256)": FunctionFragment;
    "addFlavor(uint256)": FunctionFragment;
    "deactivate(uint256,uint256)": FunctionFragment;
    "getFlavor(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGlobals(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activate"
      | "addFlavor"
      | "deactivate"
      | "getFlavor"
      | "owner"
      | "renounceOwnership"
      | "setGlobals"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addFlavor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlavor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addFlavor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deactivate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFlavor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGlobals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "FlavorActivated(uint256,uint256,uint256)": EventFragment;
    "FlavorAdded(uint256,uint256,uint8,uint256)": EventFragment;
    "FlavorDeactivated(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FlavorActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlavorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlavorDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface FlavorActivatedEventObject {
  profileId: BigNumber;
  extensionId: BigNumber;
  blockNumber: BigNumber;
}
export type FlavorActivatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  FlavorActivatedEventObject
>;

export type FlavorActivatedEventFilter = TypedEventFilter<FlavorActivatedEvent>;

export interface FlavorAddedEventObject {
  profileId: BigNumber;
  extensionId: BigNumber;
  flavorType: number;
  blockNumber: BigNumber;
}
export type FlavorAddedEvent = TypedEvent<
  [BigNumber, BigNumber, number, BigNumber],
  FlavorAddedEventObject
>;

export type FlavorAddedEventFilter = TypedEventFilter<FlavorAddedEvent>;

export interface FlavorDeactivatedEventObject {
  profileId: BigNumber;
  extensionId: BigNumber;
  blockNumber: BigNumber;
}
export type FlavorDeactivatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  FlavorDeactivatedEventObject
>;

export type FlavorDeactivatedEventFilter =
  TypedEventFilter<FlavorDeactivatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface FlavorExtension extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlavorExtensionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activate(
      profileId: PromiseOrValue<BigNumberish>,
      extensionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addFlavor(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deactivate(
      profileId: PromiseOrValue<BigNumberish>,
      extensionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getFlavor(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IFlavorExtension.FlavorStructStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGlobals(
      globals: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activate(
    profileId: PromiseOrValue<BigNumberish>,
    extensionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addFlavor(
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deactivate(
    profileId: PromiseOrValue<BigNumberish>,
    extensionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getFlavor(
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IFlavorExtension.FlavorStructStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGlobals(
    globals: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activate(
      profileId: PromiseOrValue<BigNumberish>,
      extensionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addFlavor(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivate(
      profileId: PromiseOrValue<BigNumberish>,
      extensionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getFlavor(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IFlavorExtension.FlavorStructStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGlobals(
      globals: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FlavorActivated(uint256,uint256,uint256)"(
      profileId?: PromiseOrValue<BigNumberish> | null,
      extensionId?: PromiseOrValue<BigNumberish> | null,
      blockNumber?: null
    ): FlavorActivatedEventFilter;
    FlavorActivated(
      profileId?: PromiseOrValue<BigNumberish> | null,
      extensionId?: PromiseOrValue<BigNumberish> | null,
      blockNumber?: null
    ): FlavorActivatedEventFilter;

    "FlavorAdded(uint256,uint256,uint8,uint256)"(
      profileId?: PromiseOrValue<BigNumberish> | null,
      extensionId?: PromiseOrValue<BigNumberish> | null,
      flavorType?: null,
      blockNumber?: null
    ): FlavorAddedEventFilter;
    FlavorAdded(
      profileId?: PromiseOrValue<BigNumberish> | null,
      extensionId?: PromiseOrValue<BigNumberish> | null,
      flavorType?: null,
      blockNumber?: null
    ): FlavorAddedEventFilter;

    "FlavorDeactivated(uint256,uint256,uint256)"(
      profileId?: PromiseOrValue<BigNumberish> | null,
      extensionId?: PromiseOrValue<BigNumberish> | null,
      blockNumber?: null
    ): FlavorDeactivatedEventFilter;
    FlavorDeactivated(
      profileId?: PromiseOrValue<BigNumberish> | null,
      extensionId?: PromiseOrValue<BigNumberish> | null,
      blockNumber?: null
    ): FlavorDeactivatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    activate(
      profileId: PromiseOrValue<BigNumberish>,
      extensionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addFlavor(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deactivate(
      profileId: PromiseOrValue<BigNumberish>,
      extensionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getFlavor(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGlobals(
      globals: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activate(
      profileId: PromiseOrValue<BigNumberish>,
      extensionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addFlavor(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deactivate(
      profileId: PromiseOrValue<BigNumberish>,
      extensionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getFlavor(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGlobals(
      globals: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IIceCandy {
  export type IceCandyStructStruct = {
    iceCandyType: PromiseOrValue<BigNumberish>;
    sentProfileId: PromiseOrValue<BigNumberish>;
    sentModule: PromiseOrValue<string>;
    sentModuleId: PromiseOrValue<BigNumberish>;
  };

  export type IceCandyStructStructOutput = [
    number,
    BigNumber,
    string,
    BigNumber
  ] & {
    iceCandyType: number;
    sentProfileId: BigNumber;
    sentModule: string;
    sentModuleId: BigNumber;
  };
}

export interface IIceCandyInterface extends utils.Interface {
  functions: {
    "balanceOfLucky(address)": FunctionFragment;
    "balanceOfNotRevealed(address)": FunctionFragment;
    "balanceOfRevealed(address)": FunctionFragment;
    "balanceOfUnlucky(address)": FunctionFragment;
    "getIceCandy(uint256)": FunctionFragment;
    "mint(address)": FunctionFragment;
    "numberOfReceived(uint256)": FunctionFragment;
    "numberOfReceiver(uint256)": FunctionFragment;
    "numberOfSender(uint256)": FunctionFragment;
    "numberOfSent(uint256)": FunctionFragment;
    "send(uint256,address,uint256)": FunctionFragment;
    "setGlobals(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOfLucky"
      | "balanceOfNotRevealed"
      | "balanceOfRevealed"
      | "balanceOfUnlucky"
      | "getIceCandy"
      | "mint"
      | "numberOfReceived"
      | "numberOfReceiver"
      | "numberOfSender"
      | "numberOfSent"
      | "send"
      | "setGlobals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOfLucky",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfNotRevealed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfRevealed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnlucky",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIceCandy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfReceived",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfReceiver",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfSender",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfSent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobals",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceOfLucky",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfNotRevealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfRevealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnlucky",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIceCandy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfSent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGlobals", data: BytesLike): Result;

  events: {
    "Mint(uint256,address,uint8,uint256)": EventFragment;
    "Sent(uint256,uint256,uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sent"): EventFragment;
}

export interface MintEventObject {
  tokenId: BigNumber;
  to: string;
  iceCandyType: number;
  blockNumber: BigNumber;
}
export type MintEvent = TypedEvent<
  [BigNumber, string, number, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface SentEventObject {
  tokenId: BigNumber;
  from: BigNumber;
  to: BigNumber;
  module: string;
  moduleId: BigNumber;
  blockNumber: BigNumber;
}
export type SentEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber],
  SentEventObject
>;

export type SentEventFilter = TypedEventFilter<SentEvent>;

export interface IIceCandy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IIceCandyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOfLucky(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfNotRevealed(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfRevealed(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfUnlucky(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIceCandy(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IIceCandy.IceCandyStructStructOutput]>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numberOfReceived(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numberOfReceiver(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numberOfSender(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numberOfSent(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    send(
      profileId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGlobals(
      globals: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOfLucky(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfNotRevealed(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfRevealed(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfUnlucky(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIceCandy(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IIceCandy.IceCandyStructStructOutput>;

  mint(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numberOfReceived(
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numberOfReceiver(
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numberOfSender(
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numberOfSent(
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  send(
    profileId: PromiseOrValue<BigNumberish>,
    module: PromiseOrValue<string>,
    moduleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGlobals(
    globals: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOfLucky(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfNotRevealed(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfRevealed(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfUnlucky(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIceCandy(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IIceCandy.IceCandyStructStructOutput>;

    mint(to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    numberOfReceived(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfReceiver(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfSender(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfSent(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    send(
      profileId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobals(
      globals: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Mint(uint256,address,uint8,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      iceCandyType?: PromiseOrValue<BigNumberish> | null,
      blockNumber?: null
    ): MintEventFilter;
    Mint(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      iceCandyType?: PromiseOrValue<BigNumberish> | null,
      blockNumber?: null
    ): MintEventFilter;

    "Sent(uint256,uint256,uint256,address,uint256,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      from?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<BigNumberish> | null,
      module?: null,
      moduleId?: null,
      blockNumber?: null
    ): SentEventFilter;
    Sent(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      from?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<BigNumberish> | null,
      module?: null,
      moduleId?: null,
      blockNumber?: null
    ): SentEventFilter;
  };

  estimateGas: {
    balanceOfLucky(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfNotRevealed(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfRevealed(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfUnlucky(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIceCandy(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numberOfReceived(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfReceiver(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfSender(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfSent(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    send(
      profileId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGlobals(
      globals: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOfLucky(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfNotRevealed(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfRevealed(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfUnlucky(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIceCandy(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numberOfReceived(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfReceiver(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfSender(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfSent(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    send(
      profileId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGlobals(
      globals: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IIceCandyInterface extends utils.Interface {
  functions: {
    "balanceOfEaten(address)": FunctionFragment;
    "balanceOfNotEaten(address)": FunctionFragment;
    "eat(uint256,uint256,address,uint256)": FunctionFragment;
    "isEaten(uint256)": FunctionFragment;
    "mint(address)": FunctionFragment;
    "setProfile(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOfEaten"
      | "balanceOfNotEaten"
      | "eat"
      | "isEaten"
      | "mint"
      | "setProfile"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOfEaten",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfNotEaten",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "eat",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isEaten",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfile",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceOfEaten",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfNotEaten",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEaten", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setProfile", data: BytesLike): Result;

  events: {
    "Eaten(uint256,address,uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Eaten"): EventFragment;
}

export interface EatenEventObject {
  tokenId: BigNumber;
  from: string;
  profileId: BigNumber;
  module: string;
  moduleId: BigNumber;
  blockNumber: BigNumber;
}
export type EatenEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, BigNumber],
  EatenEventObject
>;

export type EatenEventFilter = TypedEventFilter<EatenEvent>;

export interface IIceCandy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IIceCandyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOfEaten(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfNotEaten(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    eat(
      tokenId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isEaten(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProfile(
      profile: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOfEaten(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfNotEaten(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  eat(
    tokenId: PromiseOrValue<BigNumberish>,
    profileId: PromiseOrValue<BigNumberish>,
    module: PromiseOrValue<string>,
    moduleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isEaten(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProfile(
    profile: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOfEaten(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfNotEaten(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eat(
      tokenId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isEaten(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setProfile(
      profile: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Eaten(uint256,address,uint256,address,uint256,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      from?: PromiseOrValue<string> | null,
      profileId?: PromiseOrValue<BigNumberish> | null,
      module?: null,
      moduleId?: null,
      blockNumber?: null
    ): EatenEventFilter;
    Eaten(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      from?: PromiseOrValue<string> | null,
      profileId?: PromiseOrValue<BigNumberish> | null,
      module?: null,
      moduleId?: null,
      blockNumber?: null
    ): EatenEventFilter;
  };

  estimateGas: {
    balanceOfEaten(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfNotEaten(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eat(
      tokenId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isEaten(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProfile(
      profile: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOfEaten(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfNotEaten(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eat(
      tokenId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      module: PromiseOrValue<string>,
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isEaten(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProfile(
      profile: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

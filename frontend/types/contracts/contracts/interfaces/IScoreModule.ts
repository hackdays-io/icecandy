/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IScoreModule {
  export type ScoreStructStruct = {
    scoreType: PromiseOrValue<BigNumberish>;
    point: PromiseOrValue<BigNumberish>;
  };

  export type ScoreStructStructOutput = [number, BigNumber] & {
    scoreType: number;
    point: BigNumber;
  };
}

export interface IScoreModuleInterface extends utils.Interface {
  functions: {
    "createScore(uint256)": FunctionFragment;
    "getScore(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createScore" | "getScore"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createScore",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getScore",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getScore", data: BytesLike): Result;

  events: {
    "ScoreCreated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ScoreCreated"): EventFragment;
}

export interface ScoreCreatedEventObject {
  profileId: BigNumber;
  blockNumber: BigNumber;
}
export type ScoreCreatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ScoreCreatedEventObject
>;

export type ScoreCreatedEventFilter = TypedEventFilter<ScoreCreatedEvent>;

export interface IScoreModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IScoreModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createScore(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getScore(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IScoreModule.ScoreStructStructOutput[]]>;
  };

  createScore(
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getScore(
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IScoreModule.ScoreStructStructOutput[]>;

  callStatic: {
    createScore(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getScore(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IScoreModule.ScoreStructStructOutput[]>;
  };

  filters: {
    "ScoreCreated(uint256,uint256)"(
      profileId?: PromiseOrValue<BigNumberish> | null,
      blockNumber?: null
    ): ScoreCreatedEventFilter;
    ScoreCreated(
      profileId?: PromiseOrValue<BigNumberish> | null,
      blockNumber?: null
    ): ScoreCreatedEventFilter;
  };

  estimateGas: {
    createScore(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getScore(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createScore(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getScore(
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
